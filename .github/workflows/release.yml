name: Release
on:
  release:
    types: [created]
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/nodejs-hello-world
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags:
            - type=semver,pattern={{version}}
            - type=semver,pattern={{major}}.{{minor}}
            - latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release-artifacts:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: src/backend/package-lock.json
      - name: Install dependencies
        working-directory: src/backend
        run: npm ci
      - name: Run tests with coverage
        working-directory: src/backend
        run: npm run test:coverage
      - name: Create source archive
        run: tar -czf nodejs-hello-world-${{ github.event.release.tag_name }}.tar.gz --exclude=node_modules --exclude=coverage src/backend
      - name: Upload source archive to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./nodejs-hello-world-${{ github.event.release.tag_name }}.tar.gz
          asset_name: nodejs-hello-world-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip
      - name: Generate deployment instructions
        run: echo "# Deployment Instructions\n\n## Docker\n\n```bash\ndocker pull ghcr.io/${{ github.repository_owner }}/nodejs-hello-world:${{ github.event.release.tag_name }}\ndocker run -p 3000:3000 ghcr.io/${{ github.repository_owner }}/nodejs-hello-world:${{ github.event.release.tag_name }}\n```\n\n## Manual Installation\n\n```bash\ntar -xzf nodejs-hello-world-${{ github.event.release.tag_name }}.tar.gz\ncd src/backend\nnpm install --production\nnpm start\n```" > deployment-instructions.md
      - name: Upload deployment instructions to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./deployment-instructions.md
          asset_name: deployment-instructions.md
          asset_content_type: text/markdown

  verify-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Pull and run Docker image
        run: docker run -d -p 3000:3000 --name hello-world-test ghcr.io/${{ github.repository_owner }}/nodejs-hello-world:${{ github.event.release.tag_name }}
      - name: Wait for container to start
        run: sleep 5
      - name: Run health check
        run: bash infrastructure/scripts/health-check.sh
      - name: Stop and remove container
        run: docker stop hello-world-test && docker rm hello-world-test
        if: always()
      - name: Add comment to release
        uses: actions/github-script@v6
        with:
          script: "github.rest.issues.createComment({\nissue_number: context.issue.number,\nowner: context.repo.owner,\nrepo: context.repo.repo,\nbody: 'âœ… Deployment verification successful! Docker image is working correctly.'\n})"